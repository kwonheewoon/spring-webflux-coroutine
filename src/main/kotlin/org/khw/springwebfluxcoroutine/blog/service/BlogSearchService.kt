package org.khw.springwebfluxcoroutine.blog.serviceimport kotlinx.coroutines.reactive.awaitSingleimport lombok.RequiredArgsConstructorimport org.khw.springwebfluxcoroutine.blog.domain.dto.BlogSearchResponseDtoimport org.khw.springwebfluxcoroutine.blog.domain.dto.KakaoBlogSearchResponseimport org.khw.springwebfluxcoroutine.blog.domain.dto.NaverBlogSearchResponseimport org.springframework.http.MediaTypeimport org.springframework.stereotype.Serviceimport org.springframework.web.reactive.function.client.WebClientimport org.springframework.web.reactive.function.client.bodyToMonoimport reactor.core.publisher.Monoimport reactor.kotlin.core.publisher.toMono@Service@RequiredArgsConstructorclass BlogSearchService() {    private val webClients = mutableMapOf<String, WebClient>()    private fun getWebClient(portalType: String): WebClient {        return webClients.getOrPut(portalType) {            val baseUrl = when (portalType) {                "kakao" -> "https://dapi.kakao.com"                else -> "https://openapi.naver.com"            }            WebClient.builder()                .baseUrl(baseUrl)                .build()        }    }    suspend fun blogSearch(portalType: String): List<BlogSearchResponseDto> {        val webclient = when (portalType) {            "kakao" -> getWebClient(portalType)                .get()                .uri("/v2/search/blog?query=디케이테크인&sort=recency&page=1&size=10")                .headers {                    it.add("Authorization", "KakaoAK e1d72f667e7d753a711e17dfa414973e")                }                .accept(MediaType.APPLICATION_JSON)                .retrieve()                .bodyToMono<KakaoBlogSearchResponse>()                .map {                    it.documents.map { document ->                        BlogSearchResponseDto(                            document.title,                            document.contents,                            document.url,                            document.blogname,                            document.datetime                        )                    }.toList()                }            else -> getWebClient(portalType)                .get()                .uri("/v1/search/blog.json?query=df&start=1&display=10&sort=sim")                .headers {                    it.add("X-Naver-Client-Id", "4IQLhnpiRAj5PimRdsQO")                    it.add("X-Naver-Client-Secret", "yT1r3tQLQf")                }                .accept(MediaType.APPLICATION_JSON)                .retrieve()                .bodyToMono<NaverBlogSearchResponse>()                .map {                    it.items.map { document ->                        BlogSearchResponseDto(                            document.title,                            document.description,                            document.link,                            document.bloggername,                            document.postdate.atTime(0,0)                        )                    }.toList()                }        }        return webclient                .awaitSingle()    }}