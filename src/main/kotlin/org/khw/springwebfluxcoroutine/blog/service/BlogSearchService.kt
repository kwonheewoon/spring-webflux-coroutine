package org.khw.springwebfluxcoroutine.blog.serviceimport kotlinx.coroutines.reactive.awaitSingleimport lombok.RequiredArgsConstructorimport org.khw.springwebfluxcoroutine.blog.domain.dto.*import org.springframework.http.HttpHeadersimport org.springframework.http.MediaTypeimport org.springframework.stereotype.Serviceimport org.springframework.web.reactive.function.client.WebClientimport org.springframework.web.reactive.function.client.bodyToMonoimport java.util.concurrent.ConcurrentHashMap@Service@RequiredArgsConstructorclass BlogSearchService() {    private val webClients = ConcurrentHashMap<String, WebClient>()    private fun getWebClient(portalType: String): WebClient {        return webClients.getOrPut(portalType) {            val baseUrl = when (portalType) {                "kakao" -> "https://dapi.kakao.com"                else -> "https://openapi.naver.com"            }            WebClient.builder()                .baseUrl(baseUrl)                .build()        }    }    suspend fun blogSearch(portalType: String): List<BlogSearchResponseDto> {        val webClient = getWebClient(portalType).get()            .uri(getUri(portalType))            .headers { addHeaders(it, portalType) }            .accept(MediaType.APPLICATION_JSON)            .retrieve()        return when (portalType) {            "kakao" -> webClient.bodyToMono<KakaoBlogSearchResponse>()                .map { response -> response.documents.documentToList() }            else -> webClient.bodyToMono<NaverBlogSearchResponse>()                .map { response -> response.items.itemToList() }        }.awaitSingle()    }    private fun getUri(portalType: String): String = when (portalType) {        "kakao" -> "/v2/search/blog?query=디케이테크인&sort=recency&page=1&size=10"        else -> "/v1/search/blog.json?query=df&start=1&display=10&sort=sim"    }    private fun addHeaders(headers: HttpHeaders, portalType: String) {        when (portalType) {            "kakao" -> {                headers.add("Authorization", "KakaoAK e1d72f667e7d753a711e17dfa414973e")            }            else -> {                headers.add("X-Naver-Client-Id", "4IQLhnpiRAj5PimRdsQO")                headers.add("X-Naver-Client-Secret", "yT1r3tQLQf")            }        }    }    private fun List<Document>.documentToList() = map { document ->        BlogSearchResponseDto(            document.title,            document.contents,            document.url,            document.blogname,            document.datetime        )    }    private fun List<Item>.itemToList() = map { item ->        BlogSearchResponseDto(            item.title,            item.description,            item.link,            item.bloggername,            item.postdate.atTime(0, 0)        )    }}